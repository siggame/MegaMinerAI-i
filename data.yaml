game_name: mechaminer

# Variables the server needs to send the client each game
globals:
    turn_number:
        type: int
        doc: How many turns it has been since the beginning of the game
    player:
        type: Player
        doc: The player whose turn it currently is
    game_name:
        type: str
        doc: What number game this is for the server
    width:
        type: int
        doc: The width of the map (max X value)
    height:
        type: int
        doc: The height of the map (max Y value)
    fighter:
        type: RobotType
    healer:
        type: RobotType
    sniper:
        type: RobotType
    bomber:
        type: RobotType

models:
    Player:
        data:
            name:
                type: str
                doc: Player's name
            time:
                type: float
                doc: The amount of time this player has before timing out
            expensivium:
                type: int
                doc: Player's points, one with more at end of game wins
            money:
                type: int
                doc: Player' money, used to build new units
        doc: Stores information about a player in the game
        functions:
            talk:
                arguments:
                    message:
                        type: str
                        doc: The message that the player should say
                doc: Allows a player to display a message to the screen

    RobotType:
        data:
            max_health:
                type: int
                doc: The robot's starting and maximum health
            range:
                type: int
                doc: The robot's attack range
            splash:
                type: int
                doc: How many tiles away from the robot's target its attacks deal damage
            damage:
                type: int
                doc: How much damage the robot's attacks do
            movement:
                type: int
                doc: How far the robot can move each turn
            attacks:
                type: int
                doc: How many times the robot can attack each turn.
        doc: This class describes the characteristics for each type of robot

    Mappable:
        data:
            x:
                type: int
                doc: The x coordinate
            y:
                type: int
                doc: The y coordinate
        doc: The base object for all mappable things
        type: virtual

    Robot:
        parent: Mappable
        data:
            owner:
                type: Player
                doc: The owner of this Robot
            type:
                type: RobotType
                doc: The model of the robot
            health:
                type: int
                doc: The Robot's level
            moves_left:
                type: int
                doc: The number of times this robot can still move this turn
            attack_left:
                type: int
                doc: The number of times this robot can still attack this turn
            max_health:
                through: type
            range:
                through: type
            splash:
                through: type
            damage:
                through: type
            movement:
                through: type
            attacks:
                through: type
        doc: Your primary Unit
        functions:
            move:
                arguments:
                    destination:
                        type: Mappable
                        doc: The location to move to
            attack:
                arguments:
                    target:
                        type: Mappable
                        doc: The target to attack

    Factory:
        parent: Mappable
        data:
            owner:
                type: Player
                doc: The owner of this base
        doc: A base that can produce robots
        functions:
            spawn:
                arguments:
                    type:
                        type: RobotType
                doc: Creates a Robot on the base of the given type.

    Mine:
        parent: Mappable
        data:
            owner:
                type: Player
                doc: The owner of this mine
        doc: A mine that produces expensivium every turn. Obtained by moving a robot onto its tile.

    Tile:
        parent: Mappable
        data:
            wall:
                type: bool
